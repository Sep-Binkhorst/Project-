import numpy as np
import matplotlib.pyplot as plt
import ipywidgets as widgets
%matplotlib widget

grootte_x = 512
grootte_y = 25
grootte_z = 500
grootte_volume = (grootte_z, grootte_y, grootte_x)  

data_bestand = 'kommerkom.mraw'
with open(data_bestand, 'rb') as data_2:
    dtype = np.uint8
    data = np.fromfile(data_2, dtype=dtype)
eind_data = data.reshape(grootte_volume)
eind_data = eind_data[0:459,:,:]

slice_index = 1
plt.figure()
plt.imshow(eind_data[slice_index, :, :], cmap='gray')
plt.colorbar()
plt.title(f'Slice {slice_index}')
plt.show()

plt.figure()
fft_data = np.fft.fft(eind_data, axis=0)
plt.imshow(np.log(np.abs(fft_data[:fft_data.shape[0]//2, 14, :])), cmap='gray')
plt.show()

fft_data2 = np.fft.fftshift(np.fft.fft2(eind_data, axes=(1,2)), axes=(1,2))
variable_width_y = 4
variable_width_z = 20
fft_data2[:, eind_data.shape[1]//2 - variable_width_y: eind_data.shape[1]//2 + variable_width_y, (eind_data.shape[2]//2 -variable_width_z):(eind_data.shape[2]//2 +variable_width_z)] = 0
fft_eind_data = np.fft.ifft2(np.fft.ifftshift(fft_data2, axes=(1,2)), axes=(1,2))
# if g == axial
plt.figure()
plt.imshow(np.log(np.abs(fft_data2)[70]), aspect= 'auto')
plt.show()

plt.figure()
fft_data4 = np.fft.fft(fft_eind_data, axis=0)
plt.imshow(np.log(np.abs(fft_data4[:fft_data4.shape[0]//2, 14, :])), cmap='gray')
plt.show()

def phase(data, correction):
    Z = np.linspace(-1, 1, num=data.shape[0])
    data = np.array(data, dtype=np.csingle)

    phase = correction * Z**2

    phase_shift_factor = np.exp(1j * phase)

    data = data * phase_shift_factor[:, None, None]
    
    fft_data = np.fft.fft(data, axis=0)

    fft_data = fft_data[0:fft_data.shape[0]//2]   
    return fft_data

plt.figure()
@widgets.interact(j = (0, eind_data.shape[1]), correction = (-50, 50))
def show(j=0, correction=-22):
    plt.clf()
    fft_data = phase(fft_eind_data, correction)

    logimage = 20*np.log10(np.abs(np.mean(fft_data[15:, j:j+5, :], axis=1)))
    logimage -= logimage.max()
    
    plt.imshow(logimage, cmap= 'gray', vmax=-0, vmin = -70)
    plt.axis('off')
plt.show()
#sliders vmax and vmin, j
#substract mean from y-as 


fft_data = np.fft.fft(fft_eind_data, axis=0)
plt.figure()
plt.imshow(np.log(np.abs(fft_data[:, 1, :])), cmap= 'gray')    
plt.show()
